#ifndef ___TMWP
#define ___TMWP
#include<iostream>
#include<map>
using namespace std;
namespace tmwp
{
class Request
{
public:
char * method;
char * resource;
char isClientSideTechnologyResource;
char *mimeType;
int dataCount;
char ** data;
string forwardTo;
map<string,string> keyValues;
void setKeyValue(string k,string v);
string getKeyValue(string k);
string get(string name);//to extract data that has arrived in request
string decoder(string str);
void forward(string forwardTo);
};
class Response
{
private:
int clientSocketDescriptor;
bool isClosed;
bool headerCreated;
void createHeader();
public:
Response(int clientSocketDescriptor);
void write(const char *str);
void write(string str);
//We need to overload more methods for primitive data types
void close();
};
class TMWebProjector
{
private:
int portNumber;
//char *url;
//void (*ptrOnRequest)(Request &,Response &);
map<string,void (*)(Request &,Response &)> requestMappings;
public:
TMWebProjector(int portNumber);
~TMWebProjector();
void start();
void onRequest(string url,void (*ptrOnRequest)(Request &,Response &)); 
};
}
#endif